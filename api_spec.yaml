openapi: 3.0.0
info:
  title: "API"
  version: "1.0.0"
servers:
  - url: 'http://localhost:8000/api'
    description: Local host
  - url: 'https://car-api.kamasupaul.com/api'
    description: Server description


components:
  schemas:
    car:
      type: object
      required:
        - id
        - VIN
        - make_id
        - color
        - plate_number
        - year
        - description
        - name
        - owner_id
        - date_created
        - price_per_day
        - price_per_week
        - price_per_month
        - location
      properties:
        id:
          type: string
        VIN:
          type: string
        make_id:
          type: number
        color:
          type: string
          example: red
        plate_number:
          type: string
        year:
          type: number
        description:
          type: string
          description: "description of the car"
        name:
          type: string
        # booked:
        #   type: boolean
        #   description: "determines if the car is booked or not"
        owner_id:
          type: string
        date_created:
          type: integer
        price_per_day:
          type: number
        price_per_week:
          type: number
        price_per_month:
          type: number
        photos:
          type: object
          description: |
            photos of the car (files), not requird
            but a minimum of 2 photos should be provided
            if this field is included
        location:
          type: object
          description: |
            place where the car is located 
            together with its latitude and longitude
          required:
            - lat
            - long
            - place_name
          properties:
            lat:
              type: number
            long:
              type: number
            place_name:
              type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


paths:
  "/users":
        post:
            tags:
                - users
            summary: create a new user    
            requestBody:
             content:
              application/json:
                  schema:
                    type: object
                    required:
                        - email
                        - name
                        - password
                        - password_confirmation

                    properties:
                        email:
                            type: string
                        name:
                            type: string
                        password:
                            type: string
                            minLength: 6
                        password_confirmation:
                           type: string
                           minLength: 6
            responses:
                201:
                    description: "Success"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"

        get:
            tags:
                - users
            summary: get all users
            responses:
                200:
                    description: "Success"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"

  "/users/{user_id}":
        get:
            tags:
                - users
            summary: get a user with a given id
            parameters:
                - in: path
                  name: user_id
                  required: true
                  schema:
                    type: string
            security:
                - bearerAuth: []
            

            responses:
                200:
                    description: "A single user"
                404:
                    description: "User not found"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"

        patch:
            tags:
                - users
            summary: Update a users details    
            parameters:
                - in: path
                  name: user_id
                  required: true
                  schema:
                   type: string

            requestBody:
              content:
                  application/json:
                   schema:
                    type: object
                    properties:
                        name:
                            type: string
                        
            responses:
                200:
                    description: "Success"
                404:
                    description: "User not found"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"

        delete:
            tags:
                - users
            summary: "delete a user"    
            parameters:
                - in: path
                  name: user_id
                  required: true
                  schema:
                   type: string

            responses:
                200:
                    description: "Success"
                404:
                    description: "User not found"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"


  "/users/login":
        post:
            tags:
                - users
            summary: "user login"    
            requestBody:
              content:
                  application/json:
                    schema:
                     type: object
                     required:
                        - email
                        - password
                     properties:
                        email:
                            type: string
                        password:
                            type: string
            responses:
                200:
                    description: "success"
                400:
                    description: "bad request"
                401:
                    description: "failed login"

  "/users/admin_login":
        post:
            tags:
                - users
            summary: "admin login"    
            requestBody:
              content:
                  application/json:
                   schema:
                    type: object
                    required:
                        - email
                        - password
                    properties:
                        email:
                            type: string
                        password:
                            type: string

            responses:
                200:
                    description: "success"
                400:
                    description: "bad request"
                401:
                    description: "failed login"

  "/users/verify":
        post:
            tags:
                - auth
                - users
            summary: verify a user using email  
            requestBody:
              content:
                  application/json:
                   schema:
                    type: object
                    required:
                        - email
                    properties:
                        email:
                            type: string

            responses:

                200:
                    description: "Success"
                400:
                    description: "Bad request"
                404:
                    description: "User not found"
                500:
                    description: "Internal Server Error"

  "/users/verify/{token}":
        get:
            tags:
                - auth
                - users
            summary: url for token sent in verification email    
            parameters:
                - in: path
                  name: token
                  required: true
                  schema:
                   type: string
            responses:
                200:
                    description: "Success"
                404:
                    description: "User not found"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"

  "/users/forgot_password":
        post:
            tags:
                - users
                - auth
            summary: url for sending email to user who forgot password 
            requestBody:
              content:
                  application/json:
                   schema:
                    type: object
                    required:
                        - email
                    properties:
                        email:
                            type: string
            responses:
                200:
                    description: "Success"
                400:
                    description: "Bad request"
                404:
                    description: "User not found"
                500:
                    description: "Internal Server Error"

  "/users/reset_password/{token}":
        post:
            tags:
                - users
                - auth
            summary: url for retrieving token sent by email for user to reset the password    
            parameters:
                - in: path
                  name: token
                  required: true
                  schema:
                   type: string
            requestBody:
              content:
                  application/json:
                   schema:
                    type: object
                    required:
                        - password
                    properties:
                        password:
                            type: string
            responses:
                200:
                    description: "Success"
                400:
                    description: "Bad request"
                404:
                    description: "User not found"
                500:
                    description: "Internal Server Error"
            
  "/users/{user_id}/cars":
        get:
            tags:
                - user cars
            summary: get cars listed by a user   
            security:
             - bearerAuth: []
            parameters:
                - in: path
                  name: user_id
                  required: true
                  schema:
                   type: string
            responses:
                200:
                    description: "Success"
                404:
                    description: "User not found"
                400:
                    description: "Bad request"
                500:
                    description: "Internal Server Error"
    
  /car_booking/request-to-book:
    post:
      tags:
          - "car booking"    
      summary:  request to book a car
      requestBody:
       content:
           application/json:
            schema:
             type: object
             required:
              - user_id
              - car_id
             properties:
              user_id:
               type: string
              car_id:
               type: string
      responses:
        '200':
          description: OK
  /car_booking/{booking_request_id}/{status}:
    patch:
      tags:
          - "car booking"    
      summary:  accept,decline,cancel a car booking request
      parameters:
          - in: path
            name: status
            required: true
            schema:
             type: string
             enum:
                 - accept
                 - decline
                 - cancel
      responses:
        '200':
          description: OK
  /car_booking/{booking_request_id}:
    get:
      tags:
          - "car booking"    
      summary: get details of a car booking request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  car_id:
                    type: string
                  date_created:
                    type: string
                  date_updated:
                    type: string
                  date_started:
                    type: string
                  date_ending:
                    type: string
                  status:
                    type: string
                    enum: [pending, accepted, declined, canceled]
    patch:
      tags:
          - "car booking"    
      summary: update a booking request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  car_id:
                    type: string
                  date_created:
                    type: string
                  date_updated:
                    type: string
                  status:
                    type: string
                    enum: [pending, accepted, declined, canceled]
  /car_booking:
    description: car booking endpoint
    get:
      tags:
          - "car booking"
      summary:  Get all booking requests
      parameters:
        - name: query
          description: Search for booking requests
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK

    post:
      tags:
          - "car booking"
      summary:  Add a new booking request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - car_id
                - user_id
              properties:
                car_id:
                  type: string
                user_id:
                  type: string

      responses:
        "200":
          description: OK


  /cars/{car_id}:
    get:
      tags:
        - "cars"
      summary:  retrieve information for aparticular car
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "a cars information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/car"
        "404":
          description: Not found

    patch:
      tags:
        - "cars"
      summary:  Update an existing car
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/car"
      responses:
        "200":
          description: "a cars information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/car"

    delete:
      tags:
        - "cars"
      summary: delete an existing car
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "success"
        "404":
          description: "Not found"

  /cars:
    get:
      tags:
        - "cars"
      summary: search for listed cars
      parameters:
        - name: query
          description: "search using a keyword"
          in: query
          schema:
            type: string
          required: false
      responses:
        "200":
          description: cars matching the query or a paginated list of cars if no query is provided
          content:
            application/json: #response body media type
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/car"

    post:
      tags:
        - "cars"
      summary: Add a new car to the listed cars
      requestBody:
        description: "a cars information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/car"
      responses:
        "200":
          description: Returns the newly added car
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/car"

  /:
    get:
      summary: returns api docs
      responses:
        "200":
          description: OK



